name: terraform-test

on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: ["main"]
    paths-ignore:
      - '**/README.md'

permissions: read-all
#--------------------------
#
# PLEASE READ: Add a GitHub Actions variable 'INFRACOST_SCAN_TYPE' and set the value to either 'hcl_code' or 'tf_plan' depending on what type of Infracost scan desired.
#
#--------------------------
jobs:
  terraform:
    name: 'continuous-integration'
    runs-on: ubuntu-latest
    environment: development
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ secrets.IAM_ROLE }}
        role-session-name: AWSSession
        aws-region: us-east-2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
    # Checks that all Terraform configuration files are correctly written
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    # Tests the Terraform configurations against the test cases defined in the `Tests` folder
    - name: Terraform Test
      id: test
      run: terraform test -junit-xml test_result.xml
    # Publish the test results into the GitHub Actions workflow summary
    - name: Test Summary
      uses: test-summary/action@v2
      with:
        paths: "test_result.xml"
      if: always()